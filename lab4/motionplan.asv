function qref = motionplan(q0, q2, t1, t2, myrobot, obs, tol)
% alpha = 0.01;
% q = q0;
% tau_rep = [0,0,0,0,0,0];
% max_loop = 3000;
% index = 0;
% 
% while true
%    for i = 1:size(obs)
%       tau_rep = tau_rep +  rep(q(size(q,1), :), myrobot, obs{i});
%    end
%    tau_att = att(q(size(q,1), :), q2, myrobot);
%    q_kp1 = q(size(q,1),:) + alpha*(tau_att + tau_rep);
%    q = [q;q_kp1];
%     
%    %wrap angles aroung 2pi for termination comparison
%    new_q = zeros(1,5);
%    target_q = q2(1:5);
%    for i = 1:5
%         new_q(i) = new_q(i) - 2*pi*floor(new_q(i)/(2*pi));
%         target_q(i) = target_q(i) - 2*pi*floor(target_q(i)/(2*pi));
%    end
%    
%    %termination
%    if norm(new_q - q2(1:5)) < tol || index >= max_loop
%        break;
%    end
%    index = index + 1;
% end
% 
% %produce q6
% q(:, 6) = linspace(q0(6), q2(6), size(q, 1)); 
% 
% %create cubic spline
% t = linspace(t1, t2, size(q,1));
% qref = spline(t,q');

 N = 5000;
    alpha = 0.01;
    %q = zeros(N, 6);
    %q(1, 1:6) = q0;
    q = [q0];
    i = 1;
    numObstacles = length(obs);
    while i < N
        q_current = q(end, 1:6);
        Fatt = att(q_current, q2, myrobot);
        Frep = 0;
        if numObstacles == 1
            Frep = Frep + rep(q_current, myrobot, obs);
        else
            for p = 1:numObstacles
                Frep = Frep + rep(q_current, myrobot, obs{p});
            end
        end
        q_next = q_current + alpha*(Fatt' + Frep'); % transpose Frep because rep gives col vector
        q = [q; q_next];
        
        q_next = q_next(i) - 2*pi*floor(q_next(i)/(2*pi));
        
        if norm(wrapTo2Pi(q_next(1:5))-wrapTo2Pi(q2(1:5))) < tol
            display("q-qfinal within tolerance! Exiting");
            break
        end
        i = i + 1;
    end
    t = linspace(t1,t2,size(q,1));
    qref = spline(t,q');

end


